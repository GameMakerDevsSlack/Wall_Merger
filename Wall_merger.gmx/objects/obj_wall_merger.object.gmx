<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall_merger</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_wall_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// ************ //
// Do not edit //
// *********** //
// Reset object properties
x = 0; y = 0;
sprite_index = noone;
hasExecutedOnce = false;

// You can set the parent to the object you want to inherit collisions from

// ************************** //
// You can edit those values //
// ************************* //

// Objects name to merge
objectsToMerge = ds_list_create();

// Depending of the usage you may want to display the merge or not.
mergeVisible = true;

// True if you want the mask to be the same as the object sprites merged.
// False if you want the mask to be the same as the object masks merged.
preciseMask = false;

// Set merge's depth.
mergeDepth = 0;

// You can add exceptions for certain wall children you don't want to be merged.
exceptions = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete dynamically created sprites
// We need to manually destroy the manually created sprite.
if(sprite_exists(sprite_index)){
  sprite_delete(sprite_index);
  show_debug_message("Destroyed wall_merger sprite surface.");
}
if(sprite_exists(mask_index)){
  sprite_delete(mask_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hasExecutedOnce &amp;&amp; ds_list_size(objectsToMerge) &gt; 0){
  var wallsurface = noone;
  var wallofsprite = noone; 
  var masksurface = noone;
  var maskofsprite = noone;
  var myWidth = room_width;
  var myHeight = room_height;
  
  wallsurface = surface_create(myWidth, myHeight);
  surface_set_target(wallsurface);  //Prepare to draw on the surface.
  draw_clear_alpha(c_black, 0); //Clear the entire surface with transparent
  
  for(var i=0; i &lt; ds_list_size(objectsToMerge); i++){
    var curObject = ds_list_find_value(objectsToMerge, i);
    with(curObject){
      // Don't merge persistent objects or animated objects 
      if(persistent or image_speed &gt; 0){ continue; }
      if(ds_list_find_index(other.exceptions, object_index) == -1){
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha); //Draw their sprite on the surface at their location.
        if(other.preciseMask){
          instance_destroy();  //Then delete itself.
        }
      }  
    }
  }
  
  surface_reset_target();  //Reset the drawing location.
  wallofsprite = sprite_create_from_surface(wallsurface, 0, 0, myWidth, myHeight, 0, 0, 0, 0);  
  surface_free(wallsurface);  //Free up the memory from that surface.
  
  if(!preciseMask){
    masksurface = surface_create(myWidth, myHeight);
    surface_set_target(masksurface);
    draw_clear_alpha(c_black, 0);
    
    for(var i=0; i &lt; ds_list_size(objectsToMerge); i++){
      var curObject = ds_list_find_value(objectsToMerge, i);
      with(curObject){
        // Don't merge persistent objects or animated objects 
        if(persistent or image_speed &gt; 0){ continue; }
        if(ds_list_find_index(other.exceptions, object_index) == -1){
          if(mask_index &lt; 0){
            draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha)
          }else{
            draw_sprite_ext(mask_index, 0, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha); //Draw their sprite on the surface at their location.
          }
          instance_destroy();  //Then delete itself.
        }  
      }
    }
    
    maskofsprite = sprite_create_from_surface(masksurface, 0, 0, myWidth, myHeight, 0, 0, 0, 0);  
    surface_reset_target();
    surface_free(masksurface);
  }
  
  if(ds_exists(exceptions, ds_type_list)){ ds_list_destroy(exceptions); }
  if(ds_exists(objectsToMerge, ds_type_list)){ ds_list_destroy(objectsToMerge); }
  
  //Make a new sprite from the surface made of all the Wall objects.
  visible = mergeVisible; // Depending of the usage you may want to display the object or not.
  depth = mergeDepth;
  sprite_index = wallofsprite;
  if(preciseMask){
    mask_index = wallofsprite;
    sprite_collision_mask(wallofsprite, 0, 0, 0, myWidth, 0, myHeight, 0, 0);
  }else{
    mask_index = maskofsprite;
    sprite_collision_mask(maskofsprite, 0, 0, 0, myWidth, 0, myHeight, 0, 0);
  }
  
  show_debug_message("Walls merged");
  hasExecutedOnce = true;
}else{
  draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
